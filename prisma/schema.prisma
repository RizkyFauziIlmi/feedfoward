datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  organizations Organization[]
  Booking       Booking[]

  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrganizationType {
  PERSONAL
  RESTAURANT
  HOTEL
}

model Organization {
  id          String           @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  address     String?
  type        OrganizationType @default(PERSONAL)
  events      Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id            String    @id @default(cuid())
  name          String
  description   String?
  imageUrl      String?
  startDate     DateTime
  endDate       DateTime
  googleMapsUrl String
  address       String
  isOver        Boolean   @default(false)
  items         Item[]
  Booking       Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

enum ItemType {
  FOOD
  DRINK
  OTHER
}

model Item {
  id          String        @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  stock       Int
  isAvailable Boolean       @default(true)
  type        ItemType
  maxBooking  Int           @default(1)
  BookingItem BookingItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model Booking {
  id          String        @id @default(cuid())
  isCompleted Boolean       @default(false)
  items       BookingItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BookingItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  itemId String
  item   Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)

  bookingId String
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}
